{"ast":null,"code":"const VERSION = \"1.0.4\";\n\n/**\n * @param octokit Octokit instance\n * @param options Options passed to Octokit constructor\n */\nfunction requestLog(octokit) {\n  octokit.hook.wrap(\"request\", (request, options) => {\n    octokit.log.debug(\"request\", options);\n    const start = Date.now();\n    const requestOptions = octokit.request.endpoint.parse(options);\n    const path = requestOptions.url.replace(options.baseUrl, \"\");\n    return request(options).then(response => {\n      octokit.log.info(`${requestOptions.method} ${path} - ${response.status} in ${Date.now() - start}ms`);\n      return response;\n    }).catch(error => {\n      octokit.log.info(`${requestOptions.method} ${path} - ${error.status} in ${Date.now() - start}ms`);\n      throw error;\n    });\n  });\n}\nrequestLog.VERSION = VERSION;\nexport { requestLog };","map":{"version":3,"sources":["../dist-src/version.js","../dist-src/index.js"],"names":[],"mappings":"AAAO,MAAM,OAAO,GAAG,OAAA;;ACCvB;AACA;AACA;AACA;AACO,SAAS,UAAU,CAAC,OAAO,EAAE;EAChC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,OAAO,KAAK;IAC/C,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,EAAE,OAAO,CAAC;IACrC,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAA,CAAE;IACxB,MAAM,cAAc,GAAG,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC;IAC9D,MAAM,IAAI,GAAG,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;IAC5D,OAAO,OAAO,CAAC,OAAO,CAAC,CAClB,IAAI,CAAE,QAAQ,IAAK;MACpB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAE,GAAE,cAAc,CAAC,MAAO,IAAG,IAAK,MAAK,QAAQ,CAAC,MAAO,OAAM,IAAI,CAAC,GAAG,CAAA,CAAE,GAAG,KAAM,IAAG,CAAC;MACpG,OAAO,QAAQ;IAC3B,CAAS,CAAC,CACG,KAAK,CAAE,KAAK,IAAK;MAClB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAE,GAAE,cAAc,CAAC,MAAO,IAAG,IAAK,MAAK,KAAK,CAAC,MAAO,OAAM,IAAI,CAAC,GAAG,CAAA,CAAE,GAAG,KAAM,IAAG,CAAC;MACjG,MAAM,KAAK;IACvB,CAAS,CAAC;EACV,CAAK,CAAC;AACN;AACA,UAAU,CAAC,OAAO,GAAG,OAAO","sourcesContent":["export const VERSION = \"1.0.4\";\n","import { VERSION } from \"./version\";\n/**\n * @param octokit Octokit instance\n * @param options Options passed to Octokit constructor\n */\nexport function requestLog(octokit) {\n    octokit.hook.wrap(\"request\", (request, options) => {\n        octokit.log.debug(\"request\", options);\n        const start = Date.now();\n        const requestOptions = octokit.request.endpoint.parse(options);\n        const path = requestOptions.url.replace(options.baseUrl, \"\");\n        return request(options)\n            .then((response) => {\n            octokit.log.info(`${requestOptions.method} ${path} - ${response.status} in ${Date.now() - start}ms`);\n            return response;\n        })\n            .catch((error) => {\n            octokit.log.info(`${requestOptions.method} ${path} - ${error.status} in ${Date.now() - start}ms`);\n            throw error;\n        });\n    });\n}\nrequestLog.VERSION = VERSION;\n"]},"metadata":{},"sourceType":"module"}