{"ast":null,"code":"import { request } from '@octokit/request';\nimport { getUserAgent } from 'universal-user-agent';\nconst VERSION = \"4.8.0\";\nfunction _buildMessageForResponseErrors(data) {\n  return `Request failed due to following response errors:\\n` + data.errors.map(e => ` - ${e.message}`).join(\"\\n\");\n}\nclass GraphqlResponseError extends Error {\n  constructor(request, headers, response) {\n    super(_buildMessageForResponseErrors(response));\n    this.request = request;\n    this.headers = headers;\n    this.response = response;\n    this.name = \"GraphqlResponseError\";\n    // Expose the errors and response data in their shorthand properties.\n    this.errors = response.errors;\n    this.data = response.data;\n    // Maintains proper stack trace (only available on V8)\n    /* istanbul ignore next */\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\nconst NON_VARIABLE_OPTIONS = [\"method\", \"baseUrl\", \"url\", \"headers\", \"request\", \"query\", \"mediaType\"];\nconst FORBIDDEN_VARIABLE_OPTIONS = [\"query\", \"method\", \"url\"];\nconst GHES_V3_SUFFIX_REGEX = /\\/api\\/v3\\/?$/;\nfunction graphql(request, query, options) {\n  if (options) {\n    if (typeof query === \"string\" && \"query\" in options) {\n      return Promise.reject(new Error(`[@octokit/graphql] \"query\" cannot be used as variable name`));\n    }\n    for (const key in options) {\n      if (!FORBIDDEN_VARIABLE_OPTIONS.includes(key)) continue;\n      return Promise.reject(new Error(`[@octokit/graphql] \"${key}\" cannot be used as variable name`));\n    }\n  }\n  const parsedOptions = typeof query === \"string\" ? Object.assign({\n    query\n  }, options) : query;\n  const requestOptions = Object.keys(parsedOptions).reduce((result, key) => {\n    if (NON_VARIABLE_OPTIONS.includes(key)) {\n      result[key] = parsedOptions[key];\n      return result;\n    }\n    if (!result.variables) {\n      result.variables = {};\n    }\n    result.variables[key] = parsedOptions[key];\n    return result;\n  }, {});\n  // workaround for GitHub Enterprise baseUrl set with /api/v3 suffix\n  // https://github.com/octokit/auth-app.js/issues/111#issuecomment-657610451\n  const baseUrl = parsedOptions.baseUrl || request.endpoint.DEFAULTS.baseUrl;\n  if (GHES_V3_SUFFIX_REGEX.test(baseUrl)) {\n    requestOptions.url = baseUrl.replace(GHES_V3_SUFFIX_REGEX, \"/api/graphql\");\n  }\n  return request(requestOptions).then(response => {\n    if (response.data.errors) {\n      const headers = {};\n      for (const key of Object.keys(response.headers)) {\n        headers[key] = response.headers[key];\n      }\n      throw new GraphqlResponseError(requestOptions, headers, response.data);\n    }\n    return response.data.data;\n  });\n}\nfunction withDefaults(request$1, newDefaults) {\n  const newRequest = request$1.defaults(newDefaults);\n  const newApi = (query, options) => {\n    return graphql(newRequest, query, options);\n  };\n  return Object.assign(newApi, {\n    defaults: withDefaults.bind(null, newRequest),\n    endpoint: request.endpoint\n  });\n}\nconst graphql$1 = withDefaults(request, {\n  headers: {\n    \"user-agent\": `octokit-graphql.js/${VERSION} ${getUserAgent()}`\n  },\n  method: \"POST\",\n  url: \"/graphql\"\n});\nfunction withCustomRequest(customRequest) {\n  return withDefaults(customRequest, {\n    method: \"POST\",\n    url: \"/graphql\"\n  });\n}\nexport { GraphqlResponseError, graphql$1 as graphql, withCustomRequest };","map":{"version":3,"sources":["../dist-src/version.js","../dist-src/error.js","../dist-src/graphql.js","../dist-src/with-defaults.js","../dist-src/index.js"],"names":["request","Request","graphql"],"mappings":"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","sourcesContent":["export const VERSION = \"4.8.0\";\n","function _buildMessageForResponseErrors(data) {\n    return (`Request failed due to following response errors:\\n` +\n        data.errors.map((e) => ` - ${e.message}`).join(\"\\n\"));\n}\nexport class GraphqlResponseError extends Error {\n    constructor(request, headers, response) {\n        super(_buildMessageForResponseErrors(response));\n        this.request = request;\n        this.headers = headers;\n        this.response = response;\n        this.name = \"GraphqlResponseError\";\n        // Expose the errors and response data in their shorthand properties.\n        this.errors = response.errors;\n        this.data = response.data;\n        // Maintains proper stack trace (only available on V8)\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, this.constructor);\n        }\n    }\n}\n","import { GraphqlResponseError } from \"./error\";\nconst NON_VARIABLE_OPTIONS = [\n    \"method\",\n    \"baseUrl\",\n    \"url\",\n    \"headers\",\n    \"request\",\n    \"query\",\n    \"mediaType\",\n];\nconst FORBIDDEN_VARIABLE_OPTIONS = [\"query\", \"method\", \"url\"];\nconst GHES_V3_SUFFIX_REGEX = /\\/api\\/v3\\/?$/;\nexport function graphql(request, query, options) {\n    if (options) {\n        if (typeof query === \"string\" && \"query\" in options) {\n            return Promise.reject(new Error(`[@octokit/graphql] \"query\" cannot be used as variable name`));\n        }\n        for (const key in options) {\n            if (!FORBIDDEN_VARIABLE_OPTIONS.includes(key))\n                continue;\n            return Promise.reject(new Error(`[@octokit/graphql] \"${key}\" cannot be used as variable name`));\n        }\n    }\n    const parsedOptions = typeof query === \"string\" ? Object.assign({ query }, options) : query;\n    const requestOptions = Object.keys(parsedOptions).reduce((result, key) => {\n        if (NON_VARIABLE_OPTIONS.includes(key)) {\n            result[key] = parsedOptions[key];\n            return result;\n        }\n        if (!result.variables) {\n            result.variables = {};\n        }\n        result.variables[key] = parsedOptions[key];\n        return result;\n    }, {});\n    // workaround for GitHub Enterprise baseUrl set with /api/v3 suffix\n    // https://github.com/octokit/auth-app.js/issues/111#issuecomment-657610451\n    const baseUrl = parsedOptions.baseUrl || request.endpoint.DEFAULTS.baseUrl;\n    if (GHES_V3_SUFFIX_REGEX.test(baseUrl)) {\n        requestOptions.url = baseUrl.replace(GHES_V3_SUFFIX_REGEX, \"/api/graphql\");\n    }\n    return request(requestOptions).then((response) => {\n        if (response.data.errors) {\n            const headers = {};\n            for (const key of Object.keys(response.headers)) {\n                headers[key] = response.headers[key];\n            }\n            throw new GraphqlResponseError(requestOptions, headers, response.data);\n        }\n        return response.data.data;\n    });\n}\n","import { request as Request } from \"@octokit/request\";\nimport { graphql } from \"./graphql\";\nexport function withDefaults(request, newDefaults) {\n    const newRequest = request.defaults(newDefaults);\n    const newApi = (query, options) => {\n        return graphql(newRequest, query, options);\n    };\n    return Object.assign(newApi, {\n        defaults: withDefaults.bind(null, newRequest),\n        endpoint: Request.endpoint,\n    });\n}\n","import { request } from \"@octokit/request\";\nimport { getUserAgent } from \"universal-user-agent\";\nimport { VERSION } from \"./version\";\nimport { withDefaults } from \"./with-defaults\";\nexport const graphql = withDefaults(request, {\n    headers: {\n        \"user-agent\": `octokit-graphql.js/${VERSION} ${getUserAgent()}`,\n    },\n    method: \"POST\",\n    url: \"/graphql\",\n});\nexport { GraphqlResponseError } from \"./error\";\nexport function withCustomRequest(customRequest) {\n    return withDefaults(customRequest, {\n        method: \"POST\",\n        url: \"/graphql\",\n    });\n}\n"]},"metadata":{},"sourceType":"module"}