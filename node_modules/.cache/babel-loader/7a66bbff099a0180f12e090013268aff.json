{"ast":null,"code":"import { Deprecation } from 'deprecation';\nimport once from 'once';\nconst logOnceCode = once(deprecation => console.warn(deprecation));\nconst logOnceHeaders = once(deprecation => console.warn(deprecation));\n/**\n * Error with extra properties to help with debugging\n */\nclass RequestError extends Error {\n  constructor(message, statusCode, options) {\n    super(message);\n    // Maintains proper stack trace (only available on V8)\n    /* istanbul ignore next */\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n    this.name = \"HttpError\";\n    this.status = statusCode;\n    let headers;\n    if (\"headers\" in options && typeof options.headers !== \"undefined\") {\n      headers = options.headers;\n    }\n    if (\"response\" in options) {\n      this.response = options.response;\n      headers = options.response.headers;\n    }\n    // redact request credentials without mutating original request options\n    const requestCopy = Object.assign({}, options.request);\n    if (options.request.headers.authorization) {\n      requestCopy.headers = Object.assign({}, options.request.headers, {\n        authorization: options.request.headers.authorization.replace(/ .*$/, \" [REDACTED]\")\n      });\n    }\n    requestCopy.url = requestCopy.url\n    // client_id & client_secret can be passed as URL query parameters to increase rate limit\n    // see https://developer.github.com/v3/#increasing-the-unauthenticated-rate-limit-for-oauth-applications\n    .replace(/\\bclient_secret=\\w+/g, \"client_secret=[REDACTED]\")\n    // OAuth tokens can be passed as URL query parameters, although it is not recommended\n    // see https://developer.github.com/v3/#oauth2-token-sent-in-a-header\n    .replace(/\\baccess_token=\\w+/g, \"access_token=[REDACTED]\");\n    this.request = requestCopy;\n    // deprecations\n    Object.defineProperty(this, \"code\", {\n      get() {\n        logOnceCode(new Deprecation(\"[@octokit/request-error] `error.code` is deprecated, use `error.status`.\"));\n        return statusCode;\n      }\n    });\n    Object.defineProperty(this, \"headers\", {\n      get() {\n        logOnceHeaders(new Deprecation(\"[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.\"));\n        return headers || {};\n      }\n    });\n  }\n}\nexport { RequestError };","map":{"version":3,"sources":["../dist-src/index.js"],"names":[],"mappings":";;AAEA,MAAM,WAAW,GAAG,IAAI,CAAE,WAAW,IAAK,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AACpE,MAAM,cAAc,GAAG,IAAI,CAAE,WAAW,IAAK,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AACvE;AACA;AACA;AACO,MAAM,YAAY,SAAS,KAAK,CAAC;EACpC,WAAW,CAAC,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE;IACtC,KAAK,CAAC,OAAO,CAAC;IACtB;IACA;IACQ,IAAI,KAAK,CAAC,iBAAiB,EAAE;MACzB,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC;IAC3D;IACQ,IAAI,CAAC,IAAI,GAAG,WAAW;IACvB,IAAI,CAAC,MAAM,GAAG,UAAU;IACxB,IAAI,OAAO;IACX,IAAI,SAAS,IAAI,OAAO,IAAI,OAAO,OAAO,CAAC,OAAO,KAAK,WAAW,EAAE;MAChE,OAAO,GAAG,OAAO,CAAC,OAAO;IACrC;IACQ,IAAI,UAAU,IAAI,OAAO,EAAE;MACvB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ;MAChC,OAAO,GAAG,OAAO,CAAC,QAAQ,CAAC,OAAO;IAC9C;IACA;IACQ,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,CAAA,CAAE,EAAE,OAAO,CAAC,OAAO,CAAC;IACtD,IAAI,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,EAAE;MACvC,WAAW,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,CAAA,CAAE,EAAE,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE;QAC7D,aAAa,EAAE,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,EAAE,aAAa;MAClG,CAAa,CAAC;IACd;IACQ,WAAW,CAAC,GAAG,GAAG,WAAW,CAAC;IACtC;IACA;IAAA,CACa,OAAO,CAAC,sBAAsB,EAAE,0BAA0B;IACvE;IACA;IAAA,CACa,OAAO,CAAC,qBAAqB,EAAE,yBAAyB,CAAC;IAC9D,IAAI,CAAC,OAAO,GAAG,WAAW;IAClC;IACQ,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE;MAChC,GAAG,CAAA,EAAG;QACF,WAAW,CAAC,IAAI,WAAW,CAAC,0EAA0E,CAAC,CAAC;QACxG,OAAO,UAAU;MACjC;IACA,CAAS,CAAC;IACF,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,SAAS,EAAE;MACnC,GAAG,CAAA,EAAG;QACF,cAAc,CAAC,IAAI,WAAW,CAAC,uFAAuF,CAAC,CAAC;QACxH,OAAO,OAAO,IAAI,CAAA,CAAE;MACpC;IACA,CAAS,CAAC;EACV;AACA","sourcesContent":["import { Deprecation } from \"deprecation\";\nimport once from \"once\";\nconst logOnceCode = once((deprecation) => console.warn(deprecation));\nconst logOnceHeaders = once((deprecation) => console.warn(deprecation));\n/**\n * Error with extra properties to help with debugging\n */\nexport class RequestError extends Error {\n    constructor(message, statusCode, options) {\n        super(message);\n        // Maintains proper stack trace (only available on V8)\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, this.constructor);\n        }\n        this.name = \"HttpError\";\n        this.status = statusCode;\n        let headers;\n        if (\"headers\" in options && typeof options.headers !== \"undefined\") {\n            headers = options.headers;\n        }\n        if (\"response\" in options) {\n            this.response = options.response;\n            headers = options.response.headers;\n        }\n        // redact request credentials without mutating original request options\n        const requestCopy = Object.assign({}, options.request);\n        if (options.request.headers.authorization) {\n            requestCopy.headers = Object.assign({}, options.request.headers, {\n                authorization: options.request.headers.authorization.replace(/ .*$/, \" [REDACTED]\"),\n            });\n        }\n        requestCopy.url = requestCopy.url\n            // client_id & client_secret can be passed as URL query parameters to increase rate limit\n            // see https://developer.github.com/v3/#increasing-the-unauthenticated-rate-limit-for-oauth-applications\n            .replace(/\\bclient_secret=\\w+/g, \"client_secret=[REDACTED]\")\n            // OAuth tokens can be passed as URL query parameters, although it is not recommended\n            // see https://developer.github.com/v3/#oauth2-token-sent-in-a-header\n            .replace(/\\baccess_token=\\w+/g, \"access_token=[REDACTED]\");\n        this.request = requestCopy;\n        // deprecations\n        Object.defineProperty(this, \"code\", {\n            get() {\n                logOnceCode(new Deprecation(\"[@octokit/request-error] `error.code` is deprecated, use `error.status`.\"));\n                return statusCode;\n            },\n        });\n        Object.defineProperty(this, \"headers\", {\n            get() {\n                logOnceHeaders(new Deprecation(\"[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.\"));\n                return headers || {};\n            },\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}